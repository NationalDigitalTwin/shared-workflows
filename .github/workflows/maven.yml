name: Maven Build

on:
  workflow_call:
    inputs:
      DOCKER_PROFILE:
        required: false
        type: string
        default: docker
        description: |
          Specifies the name of the profile that enables/disables Docker based tests.
      USES_DOCKERHUB_IMAGES:
        required: false
        type: boolean
        default: false
        description: |
          Specifies whether this build needs to pull images from DockerHub.
      MAVEN_ARGS:
        required: false
        type: string
        default: ""
        description: |
          Specifies any additional arguments to pass to the Maven invocations.
      MAVEN_BUILD_GOALS:
        required: false
        type: string
        default: install
        description: |
          Specifies the Maven goal(s) to use when building the project.  Defaults to install.
      MAVEN_DEPLOY_GOALS:
        required: false
        type: string
        default: deploy
        description: |
          Specifies the Maven goal(s) to use when deploying the project, assuming PUBLISH_SNAPSHOTS was set to true and
          we're on the configured MAIN_BRANCH.  Defaults to deploy.
      MAVEN_REPOSITORY_ID:
        required: false
        type: string
        default: sonatype-oss
        description: |
          Specifies the ID of the repository to which SNAPSHOTs and Releases are published, this MUST match the ID of
          a repository defined in the pom.xml for the project in order for credentials to be correctly configured.
      JAVA_VERSION:
        required: false
        type: number
        default: 17
        description: |
          Specifies the JDK version to install and build with.  Defaults to 17.
      JDK:
        required: false
        type: string
        default: temurin
        description: |
          Specifies the JDK to use, defaults to temurin.
      MAIN_BRANCH:
        required: false
        type: string
        default: main
        description: |
          Specifies the main branch for the repository.  Used in determining whether to publish SNAPSHOTs in 
          conjunction with the PUBLISH_SNAPSHOTS parameter.
      PUBLISH_SNAPSHOTS:
        required: false
        type: boolean
        default: true
        description: |
          Specifies whether Maven SNAPSHOTs are published from this build.  Note that even when enabled (as is
          the default) SNAPSHOTs are only published when a build occurs on the main branch.  The main branch 
          can be separately configured via the MAIN_BRANCH parameter.
      CHANGELOG_FILE:
        required: false
        type: string
        default: CHANGELOG.md
        description: |
          Specifies the CHANGELOG file in the repository from which release notes can be extracted.
      RELEASE_FILES:
        required: false
        type: string
        description: |
          Specifies the release files that should be attached to the GitHub release.  For example a 
          downloadable package that is generated from the repository.  Regardless of this value we 
          will always attach the SBOMs to the release.
    secrets:
      MVN_USER_NAME:
        required: false
        description: |
          Username for authenticating to a Maven repository to publish SNAPSHOTs, only needed if SNAPSHOT 
          publishing is enabled.
      MVN_USER_PWD:
        required: false
        description: |
          Password/Token for authenticating to a Maven repository to publish SNAPSHOTs, only needed if SNAPSHOT
          publishing is enabled.
      DOCKER_READ_USER:
        required: false
        description: |
          Username for authenticating to DockerHub, only needed if USES_DOCKERHUB_IMAGES is set to true.
      DOCKER_READ_PWD:
        required: false
        description: |
          Password/Token for authenticating to DockerHub, only needed if USERS_DOCKERHUB_IMAGES is set to true.
      GPG_PRIVATE_KEY:
        required: false
        description: |
          A GPG Private Key that will be used to sign the built artifacts during the build process.  The pom.xml 
          MUST invoke the maven-gpg-plugin for this to have an effect.
      GPG_PASSPHRASE:
        required: false
        description: |
          The passphrase protecting the provided GPG Private Key.

    outputs:
      version: 
        description: The detected Maven Version of the project as configured in the top level pom.xml
        value: ${{ jobs.build.outputs.version }}
      is-snapshot:
        description: Whether the Maven build was for a SNAPSHOT version.
        value: ${{ jobs.build.outputs.version != '' && contains(jobs.build.outputs.version, 'SNAPSHOT') }}
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  cache-dependencies:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
          distribution: ${{ inputs.JDK }}
          cache: maven
          # We intentionally don't configure credentials for the cache dependencies step.  Any dependencies MUST
          # be in the public artifact repository so fail fast if a project is still relying on private dependencies
          # that have not been published.

      - name: Cache Maven Dependencies
        run: |
          mvn dependency:go-offline --batch-mode

  build:
    needs: cache-dependencies
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    env:
      # These have to be exported into the environment due to how the setup-java action configures the Maven
      # settings.xml file to avoid directly embedding credentials into it.
      MAVEN_USERNAME: ${{ secrets.MVN_USER_NAME }}
      MAVEN_PASSWORD: ${{ secrets.MVN_USER_PWD }}
    permissions:
      contents: read
    outputs:
      version: ${{ steps.project.outputs.version }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: ${{ inputs.USES_DOCKERHUB_IMAGES && matrix.os == 'ubuntu-latest' }}
        with:
          username: ${{ secrets.DOCKER_READ_USER }}
          password: ${{ secrets.DOCKER_READ_PWD }}

      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
          distribution: ${{ inputs.JDK }}
          cache: maven
          server-id: ${{ inputs.MAVEN_REPOSITORY_ID }}
          # Forced to use indirection here, the setup-java action configures the Maven settings.xml to reference
          # the credentials via environment variables
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Check whether GPG Signing is Enabled
        if: ${{ matrix.os == 'ubuntu-latest' }}
        id: gpg-check
        run: |
          if [ "${{ secrets.GPG_PRIVATE_KEY }}" != "" ]; then
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          else
            echo "enabled=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Import GPG key
        if: ${{ matrix.os == 'ubuntu-latest' && steps.gpg-check.outputs.enabled == 'true' }}
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Generate Extra Maven Arguments (if needed)
        id: extra-maven-args
        if: ${{ matrix.os == 'windows-latest' || steps.gpg-check.outputs.enabled == 'false' }}
        shell: bash
        run: |
          echo "args=-Dgpg.skip=true" >> "$GITHUB_OUTPUT"

      - name: Build and Verify Maven Package
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          mvn ${{ inputs.MAVEN_BUILD_GOALS }} --batch-mode -P${{ inputs.DOCKER_PROFILE }} ${{ inputs.MAVEN_ARGS }} ${{ steps.extra-maven-args.outputs.args }}

      - name: Build and Verify Maven Package (Windows - Docker Profile disabled)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        # Remember that Windows Action runners DO NOT support Docker so explicitly disable the Docker profile
        run: |
          mvn ${{ inputs.MAVEN_BUILD_GOALS }} --batch-mode -P-${{ inputs.DOCKER_PROFILE }} ${{ inputs.MAVEN_ARGS }} ${{ steps.extra-maven-args.outputs.args }}

      - name: Trivy Vulnerability Scan
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          output: trivy-report.json
          format: json
          scan-ref: .
          exit-code: 0

      - name: Upload Vulnerability Scan Results
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30

      - name: Fail build on High/Criticial Vulnerabilities
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: table
          scan-ref: .
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 1

      - name: Detect Maven version
        id: project
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo version=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) >> $GITHUB_OUTPUT

      # It's safe to skipTests for the Publish step because we just did a full mvn verify in the earlier steps
      # which will have run all the unit and integration tests
      - name: Publish Maven SNAPSHOTs
        # We only publish if all the following are true:
        # - GPG Key was provided for signing
        # - The build was not triggered by Dependabot
        # - The PUBLISH_SNAPSHOTS input was set to true
        # - We're building on the ubuntu runner
        # - We're on the configured MAIN_BRANCH 
        # - The declared version for the Maven project is a SNAPSHOT
        if: ${{ steps.gpg-check.outputs.enabled == 'true' && github.actor != 'dependabot[bot]' && inputs.PUBLISH_SNAPSHOTS && matrix.os == 'ubuntu-latest' && github.ref_name == inputs.MAIN_BRANCH && steps.project.outputs.version != '' && contains(steps.project.outputs.version, 'SNAPSHOT') }}
        run: |
          mvn ${{ inputs.MAVEN_DEPLOY_GOALS }} --batch-mode -DskipTests ${{ inputs.MAVEN_ARGS }}

  github-release:
    runs-on: ubuntu-latest
    needs: [ build ]
    if: ${{ github.ref_type == 'tag' && needs.build.outputs.version != '' && !contains(needs.build.outputs.version, 'SNAPSHOT') }}
    permissions:
      id-token: write
      contents: write
      issues: write
      pull-requests: write
    env:
      # These have to be exported into the environment due to how the setup-java action configures the Maven
      # settings.xml file to avoid directly embedding credentials into it.
      MAVEN_USERNAME: ${{ secrets.MVN_USER_NAME }}
      MAVEN_PASSWORD: ${{ secrets.MVN_USER_PWD }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
          distribution: ${{ inputs.JDK }}
          cache: maven
          server-id: ${{ inputs.MAVEN_REPOSITORY_ID }}
          # Forced to use indirection here, the setup-java action configures the Maven settings.xml to reference
          # the credentials via environment variables
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # Note this job only runs after a successful build job so safe to skip tests at this point
      - name: Deploy Maven Release
        run: |
          mvn ${{ inputs.MAVEN_DEPLOY_GOALS }} --batch-mode -P${{ inputs.DOCKER_PROFILE }} ${{ inputs.MAVEN_ARGS }} -DskipTests

      # If a CHANGELOG file has been provided find the developer curated release notes for 
      # the release from that file
      - name: Extract Release Notes
        if: ${{ inputs.CHANGELOG_FILE != '' }}
        run: |
          RELEASE="${{ needs.build.outputs.version }}"
          STARTED=0
          while IFS= read -r LINE; do
            if [ ${STARTED} -eq 1 ]; then
              if [[ "${LINE}" == \#* ]]; then
                break
              fi
              echo "${LINE}" >> ${{ github.workspace }}-release-notes.txt
            elif [[ "${LINE}" == \#*${RELEASE} ]]; then
              STARTED=1
              echo "# Version ${RELEASE}" >> ${{ github.workspace }}-release-notes.txt
            fi
          done < "${{ inputs.CHANGELOG_FILE }}"
          
          if [ ${STARTED} -eq 0 ]; then
            echo "Release ${RELEASE} not found in ${{ inputs.CHANGELOG_FILE }}, no CHANGELOG release notes available" 1>&2
          else
            echo "Detected Release Notes for ${RELEASE} are:"
            cat ${{ github.workspace }}-release-notes.txt
          fi
          exit 0

      - name: Detect whether GitHub Automatic Release Notes are enabled
        id: auto
        run: |
          if [ -f ".github/release.yml" ]; then
            echo "Using GitHub Automated Release Notes in addition to CHANGELOG release notes"
            echo "enabled=true" >> ${GITHUB_OUTPUT}
          else
            echo "Using CHANGELOG release notes only"
            echo "enabled=false" >> ${GITHUB_OUTPUT}
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@69320dbe05506a9a39fc8ae11030b214ec2d1f87 # v2.0.5
        with:
          body_path: ${{ github.workspace }}-release-notes.txt
          generate_release_notes: ${{ steps.auto.outputs.enabled }}
          name: ${{ needs.build.outputs.version }}
          prerelease: false
          # We grab the CycloneDX BOMs we're generating plus any release files the workflow inputs specify
          files: |
            **/*-bom.json
            ${{ inputs.RELEASE_FILES }}
        
        
