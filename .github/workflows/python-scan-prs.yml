name: Python Vuln Scan App and Image

on:
  workflow_call:
    inputs:
      SCAN_IMAGE:
        description: 'Flag to determine whether to scan the image with Anchore'
        required: false
        default: false
        type: boolean
      DOCKERFILE:
        description: |
          The name of the Dockerfile to build the image from. This is relative to the PATH input.
        required: false
        default: 'Dockerfile'
        type: string
      PATH:
        description: |
          The path in which the Dockerfile is located. For current path leave empty. Otherwise e.g. ./frontend
        required: false
        default: '.'
        type: string

jobs:
  generate_sbom:
    name: Generate Application SBOM
    uses: telicent-oss/shared-workflows/.github/workflows/python-generate-and-scan-application.yml@TPT-185/TPT-184
    with:
      SCAN_NAME: ${{ github.run_number }}

  build_and_scan_image:
    name: Build Docker Image and Scan with Anchore
    needs: generate_sbom
    runs-on: ubuntu-latest
    if: ${{ inputs.SCAN_IMAGE }}
    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Application SBOM
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.generate_sbom.outputs.artifact-name }}

      - name: Rename SBOM for reference
        run: |
          mv ${{ needs.generate_sbom.outputs.artifact-name }}-bom.json sbom.json

      - name: Extract Repository Name
        id: extract-repo-name
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image Locally
        id: build-image
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.PATH }}
          file: ${{ inputs.DOCKERFILE }}
          platforms: linux/amd64
          tags: ${{ env.REPO_NAME }}:latest
          load: true  # load image in runner so it can be scanned

      - name: Scan Docker Image with Anchore
        id: anchore-scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REPO_NAME }}:latest
          fail-build: true
          severity-cutoff: high
          output-format: sarif

      - name: Inspect Anchore SARIF Report
        if: always()
        run: cat ${{ steps.anchore-scan.outputs.sarif }}

      - name: Upload Anchore Vulnerability Scan SARIF Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: anchore-scan-report
          path: ${{ steps.anchore-scan.outputs.sarif }}
          retention-days: 30
